FROM ubuntu:18.04
USER root
WORKDIR /
SHELL ["/bin/bash", "-xo", "pipefail", "-c"]
# Creating user openvino
RUN useradd -ms /bin/bash openvino && \
    chown openvino -R /home/openvino
ARG DEPENDENCIES="autoconf \
                  automake \
                  build-essential \
                  cmake \
                  cpio \
                  curl \
                  gnupg2 \
                  libdrm2 \
                  libglib2.0-0 \
                  lsb-release \
                  libgtk-3-0 \
                  libtool \
                  udev \
                  unzip \
                  dos2unix"
RUN apt-get update && \
    apt-get install -y --no-install-recommends ${DEPENDENCIES} && \
    rm -rf /var/lib/apt/lists/*
WORKDIR /thirdparty
RUN sed -Ei 's/# deb-src /deb-src /' /etc/apt/sources.list && \
    apt-get update && \
    apt-get source ${DEPENDENCIES} && \
    rm -rf /var/lib/apt/lists/*
# setup Python
ENV PYTHON python3.6
RUN apt-get update && \
    apt-get install -y --no-install-recommends python3-pip python3-dev lib${PYTHON} && \
    rm -rf /var/lib/apt/lists/*
ARG package_url
ARG TEMP_DIR=/tmp/openvino_installer
WORKDIR ${TEMP_DIR}
ADD ${package_url} ${TEMP_DIR}
# install product by installation script
ENV INTEL_OPENVINO_DIR /opt/intel/openvino
RUN tar -xzf ${TEMP_DIR}/*.tgz --strip 1
RUN sed -i 's/decline/accept/g' silent.cfg && \
    ${TEMP_DIR}/install.sh -s silent.cfg && \
    ${INTEL_OPENVINO_DIR}/install_dependencies/install_openvino_dependencies.sh
WORKDIR /tmp
RUN rm -rf ${TEMP_DIR}
# installing dependencies for package
WORKDIR /tmp
RUN ${PYTHON} -m pip install --no-cache-dir setuptools && \
    find "${INTEL_OPENVINO_DIR}/" -type f -name "*requirements*.*" -path "*/${PYTHON}/*" -exec ${PYTHON} -m pip install --no-cache-dir -r "{}" \; && \
    find "${INTEL_OPENVINO_DIR}/" -type f -name "*requirements*.*" -not -path "*/post_training_optimization_toolkit/*" -not -name "*windows.txt"  -not -name "*ubuntu16.txt" -not -path "*/python3*/*" -not -path "*/python2*/*" -exec ${PYTHON} -m pip install --no-cache-dir -r "{}" \;
WORKDIR ${INTEL_OPENVINO_DIR}/deployment_tools/open_model_zoo/tools/accuracy_checker
RUN source ${INTEL_OPENVINO_DIR}/bin/setupvars.sh && \
    ${PYTHON} -m pip install --no-cache-dir -r ${INTEL_OPENVINO_DIR}/deployment_tools/open_model_zoo/tools/accuracy_checker/requirements.in && \
    ${PYTHON} ${INTEL_OPENVINO_DIR}/deployment_tools/open_model_zoo/tools/accuracy_checker/setup.py install
WORKDIR ${INTEL_OPENVINO_DIR}/deployment_tools/tools/post_training_optimization_toolkit
RUN if [ -f requirements.txt ]; then \
        ${PYTHON} -m pip install --no-cache-dir -r ${INTEL_OPENVINO_DIR}/deployment_tools/tools/post_training_optimization_toolkit/requirements.txt && \
        ${PYTHON} ${INTEL_OPENVINO_DIR}/deployment_tools/tools/post_training_optimization_toolkit/setup.py install; \
    fi;
# Post-installation cleanup and setting up OpenVINO environment variables
RUN if [ -f "${INTEL_OPENVINO_DIR}"/bin/setupvars.sh ]; then \
        printf "\nsource \${INTEL_OPENVINO_DIR}/bin/setupvars.sh\n" >> /home/openvino/.bashrc; \
        printf "\nsource \${INTEL_OPENVINO_DIR}/bin/setupvars.sh\n" >> /root/.bashrc; \
    fi;
RUN find "${INTEL_OPENVINO_DIR}/" -name "*.*sh" -type f -exec dos2unix {} \;


WORKDIR /tmp/opencl
RUN usermod -aG video openvino
RUN apt-get update && \
    apt-get install -y --no-install-recommends apt-utils && \
    apt-get install -y --no-install-recommends ocl-icd-libopencl1 && \
    rm -rf /var/lib/apt/lists/* && \
    curl -L "https://github.com/intel/compute-runtime/releases/download/20.25.17111/intel-gmmlib_20.1.1_amd64.deb" --output "intel-gmmlib_20.1.1_amd64.deb" && \
    curl -L "https://github.com/intel/compute-runtime/releases/download/20.25.17111/intel-igc-core_1.0.4155_amd64.deb" --output "intel-igc-core_1.0.4155_amd64.deb" && \
    curl -L "https://github.com/intel/compute-runtime/releases/download/20.25.17111/intel-igc-opencl_1.0.4155_amd64.deb" --output "intel-igc-opencl_1.0.4155_amd64.deb" && \
    curl -L "https://github.com/intel/compute-runtime/releases/download/20.25.17111/intel-opencl_20.25.17111_amd64.deb" --output "intel-opencl_20.25.17111_amd64.deb" && \
    curl -L "https://github.com/intel/compute-runtime/releases/download/20.25.17111/intel-ocloc_20.25.17111_amd64.deb" --output "intel-ocloc_20.25.17111_amd64.deb" && \   
    dpkg -i /tmp/opencl/*.deb && \
    ldconfig && \
    rm -rf /tmp/opencl

USER openvino
WORKDIR ${INTEL_OPENVINO_DIR}

# Download the models for segmentation demo
RUN mkdir /home/openvino/models
RUN ${INTEL_OPENVINO_DIR}/deployment_tools/tools/model_downloader/downloader.py --list ${INTEL_OPENVINO_DIR}/deployment_tools/inference_engine/demos/segmentation_demo/models.lst -o /home/openvino/models/

# Optimize the DeepLab model (from Tensorflow to OpenVino binary format)
RUN mkdir /home/openvino/models/public/deeplabv3-bin
RUN python3 ${INTEL_OPENVINO_DIR}/deployment_tools/model_optimizer/mo_tf.py --input_model /home/openvino/models/public/deeplabv3/deeplabv3_mnv2_pascal_train_aug/frozen_inference_graph.pb \
 --input_shape=[1,513,513,3] \
 --input=1:mul_1 \
 --output=ArgMax \
 --data_type=FP16 \
 --output_dir /home/openvino/models/public/deeplabv3-bin/FP16

RUN python3 ${INTEL_OPENVINO_DIR}/deployment_tools/model_optimizer/mo_tf.py --input_model /home/openvino/models/public/deeplabv3/deeplabv3_mnv2_pascal_train_aug/frozen_inference_graph.pb \
 --input_shape=[1,513,513,3] \
 --input=1:mul_1 \
 --output=ArgMax \
 --data_type=FP32 \
 --output_dir /home/openvino/models/public/deeplabv3-bin/FP32

# Build OpenVino demos
RUN cd /opt/intel/openvino_2020.3.194/deployment_tools/inference_engine/demos && ./build_demos.sh

WORKDIR /home/openvino
CMD ["/bin/bash"]

